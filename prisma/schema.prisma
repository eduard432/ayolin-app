// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum UserRole {
  FREE
  PRO
  ADMIN
}

model User {
  // Fields for Authjs:
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  email                   String?                @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  accounts                Account[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?                @db.ObjectId
  isPro                   Boolean                @default(false) // âš¡ Campo para usuarios premium
  role                    String                 @default("FREE") // o "PRO", si prefieres usar roles
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  stripeCustomerId        String?
  // Extra fields for app:
  chatbots                Chatbot[]
  // Usage fields:
  maxCreditUsage          Float                  @default(0.075)
  maxChatbots             Int                    @default(3)
  creditUsage             Float                  @default(0)
  usageLogs               UsageLog[]
  avatarColor             String?                @default("bg-blue-500")
  avatarSeed              String?                @default("") // Multiavatar
  avatarNoBg              Boolean                @default(true) // Quitar circulo/fondo del SVG
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Chatbot {
  id            String                 @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  model         String
  userId        String                 @db.ObjectId
  user          User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  defaultChat   String                 @db.ObjectId
  chats         Chat[]
  initialPrompt String
  tools         ToolFunctionInstance[]
  channels      ChannelInstance[]
  totalMessages Int                    @default(0)
  totalChats    Int                    @default(0)
  creditUsage   Float                  @default(0)
  usageLogs     UsageLog[]
}

type ChatStatus {
  // totalMessages        Int
  // totalChats           Int
  // lastActive           DateTime
  pendingMessagesCount Int @default(0)
}

type ChatSettings {
  maxBatchReplyDelay Int @default(5000) // Maximum delay in milliseconds for batch replies
}

model Chat {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  chatbotId            String    @db.ObjectId
  chatbot              Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  messages             Message[] @relation("ChatMessages")
  lastActive           DateTime  @default(now())
  channelId            String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  totalMessages        Int       @default(0)
  creditUsage          Float     @default(0)
  status ChatStatus     
  settings ChatSettings  
}

model Message {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String      @db.ObjectId
  chat      Chat        @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade)
  role      MessageRole
  parts     Json[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum MessageRole {
  user
  assistant
  system
}

type ToolFunctionInstance {
  keyName  String
  settings Json
}

enum ToolFunctionType {
  external
  native
}

model ToolFunction {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  keyName         String           @unique
  name            String
  description     String
  shortDesc       String
  imageUrl        String
  settingsSchema  Json?
  tags            String[]
  inputSchema     Json?
  apiUrl          String?
  fnType          ToolFunctionType
  aiDesc          String? 
}

type ChannelInstance {
  keyName  String
  settings Json
}

model Channel {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  keyName         String           @unique
  name            String
  description     String
  shortDesc       String
  imageUrl        String
  settingsSchema  Json?
  tags            String[]
}

model UsageLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  creditUsage Float    @default(0)
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatbotId   String   @db.ObjectId
  chatbot     Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
}
