// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum UserRole {
  FREE
  PRO
}

model User {
  // Fields for Authjs:
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  email                   String?                @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  accounts                Account[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?                @db.ObjectId
  isPro     Boolean  @default(false) // âš¡ Campo para usuarios premium
  role      String   @default("FREE") // o "PRO", si prefieres usar roles
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Extra fields for app:
  chatbots                Chatbot[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

type Usage {
  inputTokens  Int
  outputTokens Int
}

model Chatbot {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  model       String
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  defaultChat String? @db.ObjectId
  chats       Chat[]
  usage       Usage
  totalMessages Int @default(0)
  initialPrompt String
}

model Chat {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  chatbotId   String   @db.ObjectId
  chatbot     Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  messages    Json[]
  lastActive  DateTime @default(now())
}